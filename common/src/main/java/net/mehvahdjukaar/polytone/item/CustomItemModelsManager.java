package net.mehvahdjukaar.polytone.item;

import com.google.gson.JsonElement;
import com.mojang.serialization.DynamicOps;
import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
import net.mehvahdjukaar.polytone.Polytone;
import net.mehvahdjukaar.polytone.utils.JsonImgPartialReloader;
import net.minecraft.client.multiplayer.ClientLevel;
import net.minecraft.client.resources.model.BakedModel;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import org.jetbrains.annotations.Nullable;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class CustomItemModelsManager extends JsonImgPartialReloader {


    private final Map<Item, ItemModelOverrideList> itemModels = new Object2ObjectOpenHashMap<>();
    private final Set<ResourceLocation> extraModels = new HashSet<>();
    private final Set<AutoGeneratedModel> autoGeneratedModels = new HashSet<>();

    public CustomItemModelsManager() {
        super("custom_item_models");

    }

    @Override
    protected void reset() {
        this.itemModels.clear();
        this.extraModels.clear();
    }

    @Override
    protected void process(Resources resources, DynamicOps<JsonElement> ops) {
        for (var v : resources.jsons().entrySet()) {
            JsonElement json = v.getValue();
            ResourceLocation location = v.getKey();

            StandaloneItemModelOverride modelOverride = StandaloneItemModelOverride.CODEC.decode(ops, json)
                    .getOrThrow(errorMsg -> new IllegalStateException("Could not decode Custom Item Model with json id " + location + "\n error: " + errorMsg))
                    .getFirst();

            if (modelOverride != null) {
                // merge
                // load model
                this.extraModels.add(modelOverride.model());
                this.itemModels.computeIfAbsent(modelOverride.getTarget(), a -> new ItemModelOverrideList())
                        .add(modelOverride);
                if (modelOverride.isAutoModel()) {
                    this.autoGeneratedModels.add(AutoGeneratedModel.createDefault(location));
                }
            }
        }
    }

    @Override
    protected void apply() {
        super.apply();
        int allModels = 0;
        for (var list : this.itemModels.values()) {
            allModels += list.size();
        }
        Polytone.LOGGER.info("Loaded {} Custom Item Models for {} items", allModels, this.itemModels.size());
    }

    @Nullable
    public BakedModel getOverride(ItemStack itemStack, @Nullable ClientLevel level, @Nullable LivingEntity entity, int seed) {
        ItemModelOverrideList list = this.itemModels.get(itemStack.getItem());
        if (list == null) return null;
        return list.getModel(itemStack, level, entity, seed);
    }

    public Set<ResourceLocation> getExtraModels() {
        return extraModels;
    }

    public Set<AutoGeneratedModel> getAutoGeneratedModels() {
        return autoGeneratedModels;
    }

    public void addModel(Item target, List<ItemModelOverride> overrides) {
        this.itemModels.computeIfAbsent(target, a -> new ItemModelOverrideList())
                .addAll(overrides);
        this.extraModels.addAll(overrides.stream().map(ItemModelOverride::model).toList());
    }
}
