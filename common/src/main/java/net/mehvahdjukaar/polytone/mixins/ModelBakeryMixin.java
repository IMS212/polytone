package net.mehvahdjukaar.polytone.mixins;

import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperation;
import net.mehvahdjukaar.polytone.Polytone;
import net.minecraft.client.renderer.block.model.BlockModel;
import net.minecraft.client.resources.model.ModelBakery;
import net.minecraft.client.resources.model.ModelResourceLocation;
import net.minecraft.client.resources.model.UnbakedModel;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.profiling.ProfilerFiller;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Mutable;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;

import java.util.HashMap;
import java.util.Map;

@Mixin(ModelBakery.class)
public class ModelBakeryMixin {

    @Mutable
    @Shadow
    @Final
    private Map<ResourceLocation, BlockModel> modelResources;

    @Shadow
    @Final
    private Map<ResourceLocation, UnbakedModel> unbakedCache;

    @Shadow
    @Final
    private Map<ModelResourceLocation, UnbakedModel> topLevelModels;

    @WrapOperation(method = "<init>", at = @At(value = "INVOKE", target = "Lnet/minecraft/util/profiling/ProfilerFiller;push(Ljava/lang/String;)V"))
    private void polytone$addGeneratedCustomItemModels(ProfilerFiller instance, String s, Operation<Void> original) {
        Map<ResourceLocation, BlockModel> autoGeneratedModels = Polytone.ITEM_MODELS.createAutoGeneratedModels();

        if (!autoGeneratedModels.isEmpty()) {
            this.modelResources = new HashMap<>(this.modelResources);
            this.modelResources.putAll(autoGeneratedModels);
            this.unbakedCache.putAll(autoGeneratedModels);
            autoGeneratedModels.forEach((key, value) -> {
                String p = Polytone.isForge ? "standalone" : "fabric_resource";
                this.topLevelModels.put(new ModelResourceLocation(key, p), value);
            });
        }
        original.call(instance, s);
    }
}
