package net.mehvahdjukaar.polytone.mixins;

import com.llamalad7.mixinextras.injector.ModifyExpressionValue;
import com.llamalad7.mixinextras.injector.ModifyReturnValue;
import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperation;
import it.unimi.dsi.fastutil.objects.Object2IntMap;
import net.mehvahdjukaar.polytone.Polytone;
import net.minecraft.client.renderer.block.model.BlockModel;
import net.minecraft.client.resources.model.*;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.state.BlockState;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Mutable;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.util.HashMap;
import java.util.Map;

@Mixin(ModelBakery.class)
public class ModelBakeryMixin {

    @Mutable
    @Shadow @Final private Map<ResourceLocation, BlockModel> modelResources;

    @Shadow @Final private Map<ResourceLocation, UnbakedModel> unbakedCache;

    @Shadow @Final private Map<ModelResourceLocation, UnbakedModel> topLevelModels;

    @ModifyExpressionValue(method = "<init>", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/resources/model/BlockStateModelLoader;getModelGroups()Lit/unimi/dsi/fastutil/objects/Object2IntMap;"))
    private Object2IntMap<BlockState> onInit(Object2IntMap<BlockState> map) {
        this.modelResources = new HashMap<>(this.modelResources);
        Map<ResourceLocation, BlockModel> autoGeneratedModels = Polytone.ITEM_MODELS.createAutoGeneratedModels();
        this.modelResources.putAll(autoGeneratedModels);
        this.unbakedCache.putAll(autoGeneratedModels);
        autoGeneratedModels.forEach((key, value) -> {
            this.topLevelModels.put(new ModelResourceLocation(key, "standalone"), value);
        });
        return map;
    }
}
