plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "neoforge"
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}


processResources {
    // input variables of this task:
    var replaceProperties = [
            minecraft_version    : minecraft_version,
            minecraft_min_version: minecraft_min_version,
            minecraft_max_version: minecraft_max_version,
            pack_format_number   : pack_format_number,

            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_version          : mod_version,
            mod_license          : mod_license,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            mod_credits          : mod_credits,
            mod_homepage         : mod_homepage,
            mod_github           : mod_github,

            neo_version          : neo_version,
            neo_version_range    : neo_version_range,
            loader_version_range : loader_version_range,
    ]
    // setting them as input
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta', 'update.json']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories{
    // Built mods
    flatDir {
        dirs "mods"
    }
    mavenCentral()
}

dependencies {
    //forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    neoForge "net.neoforged:neoforge:${neo_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    implementation include( "net.objecthunter:exp4j:${exp4j_version}")
    forgeRuntimeLibrary ( "net.objecthunter:exp4j:${exp4j_version}")

    modCompileOnly ("curse.maven:curios-continuation-1037991:5546342")
    modCompileOnly ("curse.maven:embeddium-908741:5630163")

    modCompileOnly("curse.maven:alexs-caves-924854:4806837")
    modCompileOnly("curse.maven:citadel-331936:4786380")
    //modCompileOnly ("org.embeddedt:embeddium-1.21:1.0.7+mc1.21")


    implementation 'org.jetbrains:annotations:22.0.0'
}
